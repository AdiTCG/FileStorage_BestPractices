@page "/"
@using FileStorageApp.Data;
@using FileStorageDbLibrary;
@inject IConfiguration config
@inject ISqlDataAccess sql

<PageTitle>Index</PageTitle>

<EditForm Model="newCustomer" OnValidSubmit="SubmitForm">
    <div>
        <label for="firstName">First Name:</label>
        <InputText id="firstName" @bind-Value="newCustomer.FirstName"></InputText>
    </div>
    <div>
        <label for="lastName">Last Name:</label>
        <InputText id="lastName" @bind-Value="newCustomer.LastName"></InputText>
    </div>
    <div>
        <label for="profilePicture">Profile Picture:</label>
        <InputFile OnChange="LoadFiles" accept=".jpg,.png,.jpeg"></InputFile>
    </div>
    <button class="btn btn-primary mt-3" type="submit">Create Customer</button>
</EditForm>


@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

@if (customers is not null)
{
    <h2>Existing Customers</h2>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Profile Picture</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var c in customers)
            {
                <tr>
                    <td>@c.Id</td>
                    <td>@c.FirstName</td>
                    <td>@c.LastName</td>
                    <td>
                        @if (string.IsNullOrEmpty(c.UserName) == false)
                        {
                            <img src="" width="400"/>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private long maxFileSize = 1024 * 1024 * 2; //2MB
    private int maxAllowedFileCount = 3;
    private List<string> errors = new();
    private CustomerModel newCustomer = new();
    private IBrowserFile? file;
    private List<CustomerModel> customers;

    private async Task SubmitForm()
    {
        try
        {
            string fullFillPath = await FileCapture();
            newCustomer.FileName = fullFillPath;

            await sql.SaveData(
                "dbo.spCustomer_Insert",
                "Default",
                newCustomer);

                newCustomer = new();
                file = null;
                errors.Clear();

            await LoadCustomers();
        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex.Message}");
            throw;
        }
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task LoadCustomers()
    {
        customers = await sql.LoadData<CustomerModel>(
            "dbo.spCustomer_GetAll",
            "Default",
            null
        );
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task<string> FileCapture()
    {
        if (file == null)
        {
            return "";
        }

        try
        {
            string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));

            string fileFullPath = Path.Combine(config.GetValue<string>("FileStoragePath")!,
            "FileName",
            newFileName);

            if (Directory.Exists(Path.GetDirectoryName(fileFullPath)) == false)
            {
                Directory.CreateDirectory(Path.GetDirectoryName(fileFullPath));
            }

            using FileStream fileStream = new(fileFullPath, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fileStream);

            return fileFullPath;
        }
        catch (Exception ex)
        {
            errors.Add($"File: {file.Name}, Error: {ex.Message}");
            throw;
        }
    }

}